#include <SFML/Graphics.hpp>
#include <cmath>
#include <random>
#include <deque>
#include <ctime>
#include <iostream>
#include "incl/hsl_color.hpp"
static const double worldSizeX = 500.0d;
static const double worldSizeY = 500.0d;
static const int scale = 1;

class Position{
public:
    double x;
    double y;
    Position(double x, float y): x{x}, y{y} {};
};

class Particle{
private:
    //multipliers
    double m[26];
public:
    std::deque<Position> lastpos;
    HSL color;
    Particle(){}
    Particle(std::random_device &dRE, std::uniform_real_distribution<double> &rand_dist)
    {
        //std::cout<<"Generating..."<<std::endl;
        Position p((double)(rand_dist(dRE) * worldSizeX),
                   (double)(rand_dist(dRE) * worldSizeY));

        lastpos.push_front(p);

        color = HSL((int)(rand_dist(dRE)*360),50,100);

        /*for (int i = 0; i < (int)((sizeof m)/sizeof(m[0])); i++)
        {
            m[i] = (double) 10.0d - rand_dist(dRE) * 20.0d;
            }*/
    }

    void tick(double t)
    {
        //std::cout<<"TICK!"<<std::endl;
        Position p = lastpos.front();
        /*p.x += tslf*m[0]*( m[1]*(m[2]*pow(p.x, 2) + m[3]*pow(p.y, 2))
                           + m[4]*(m[5]*pow(p.x, 2) + m[6]*p.y)
                           + m[7]*(m[8]*p.x + m[9]*pow(p.y, 2)) + m[10]*(m[11]*p.x + m[12]*p.y));
     p.y += tslf*m[13]*( m[14]*(m[15]*pow(p.x, 2) + m[16]*pow(p.y, 2))
                            + m[17]*(m[18]*pow(p.x, 2) + m[19]*p.y)
                            + m[20]*(m[21]*p.x + m[22]*pow(p.y, 2)) + m[23]*(m[24]*p.x + m[25]*p.y));
        */
        p.x = pow(p.x,2)*0.0001d - pow(p.y,2)*0.0001d - pow(t,2)*0.0001d - p.x - t;
        p.y = pow(p.x,2)*0.0001d + pow(t,2)*0.0001d - p.x - p.y - t;
        std::cout<<"p.x: "<<p.x<<" p.y:"<<p.y<<std::endl;
        lastpos.push_front(p);
        if (lastpos.size() > 99)
        {
            lastpos.pop_back();
            //for(int i=0; i<(int)(lastpos.size()); i++)
            //    std::cout<<lastpos[i].x<<" , "<<lastpos[i].y<<std::endl;
        }
    }
};

int main()
{

    auto rE = new std::random_device;
    auto rand_double_0_1 = new std::uniform_real_distribution<double>(0.0,1.0);

    Particle particles[10];
    for(int i = 0; i < (int)(sizeof particles / sizeof particles[0]); i++)
        particles[i] = Particle(*rE, *rand_double_0_1);
    //std::cout<<"All particles initialized."<<std::endl;
    delete rE;
    delete rand_double_0_1;
    sf::RenderWindow window(sf::VideoMode((int)(worldSizeY)*scale,
                                          (int)(worldSizeX)*scale), "_DEV_ SFML testing");
    sf::CircleShape shape((double)(scale));
    //shape.setFillColor(sf::Color::Green);

    double t = 0.00001d;
    
    while (window.isOpen())
    {

        std::clock_t begin = clock();
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        //std::cout<<"Staying alive!"<<std::endl;
        window.clear();
        for(int i = 0; i < (int)(sizeof particles/sizeof particles[0]); i++)
        {
            //std::cout<<"Processing particle: "<< i <<std::endl;
            HSL pc = particles[i].color;
            int numberOfTrails =particles[i].lastpos.size();
            //std::cout<<"nTrails: "<<numberOfTrails <<std::endl;
            int lstepdown = 100/numberOfTrails;
            for(int j = 0; j<numberOfTrails; j++)
            {
                //std::cout<<"in ze loop."<<std::endl;
                pc.Luminance -= lstepdown;
                shape.setFillColor(pc.TurnToRGB());
                int xp = particles[i].lastpos[j].x * scale;
                int yp = particles[i].lastpos[j].y * scale;
                //std::cout<<"xp: "<<xp<<" yp: "<<yp<<std::endl;
                shape.setPosition(xp, yp);
                window.draw(shape);
            }
            particles[i].tick(t);
        }
        //window.draw(shape);
        window.display();
        std::clock_t end = clock();
        t += double(end - begin) / CLOCKS_PER_SEC * 0.001d;
        std::cout<<"t: "<<t<<std::endl;
    }
  
    return 0;
}
